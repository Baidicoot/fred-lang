# a b -> b a
swap: pair uncons

# {a b} -> a b
unpair: uncons swap

# a b -> {b a}
cons: swap pair

# a b c -> b c a
rot3: pair pair reorder unpair uncons
# a b c -> c a b
unrot3: rot3 rot3

# a b c d -> b c d a
rot4: pair pair pair reorder unpair reorder unpair uncons
# a b c d -> d a b c
unrot4: rot4 rot4 rot4

# a b c d e -> b c d e a
rot5: pair pair pair pair reorder unpair reorder unpair reorder unpair uncons
# a b c d e -> e a b c d
unrot5: rot5 rot5 rot5 rot5

# fn1 fn2 b -> if b then fn1() else fn2()
if: call call

# fn b -> if b then fn()
branch: 'unit swap if

unit:
(): '()

# a b -> a
true: drop
# a b -> b
false: swap drop

# b -> !b
not: 'false 'true rot3 call

zero: () 'true pair
# x -> (x + 1)
succ: 'false pair
# a -> 0
_constzero: drop zero
# x -> (x - 1)
pred: unpair '_constzero swap 'unit swap if

# 0 -> true
# 1 -> false
iszero: uncons drop

add_internal: swap succ swap pred dup iszero not 'add_internal swap branch
# a b -> (a + b)
add: dup iszero not 'add_internal swap branch drop